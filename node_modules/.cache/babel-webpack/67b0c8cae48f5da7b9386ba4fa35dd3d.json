{"ast":null,"code":"import { of } from 'rxjs';\nimport { CONTENT_LIST } from '../helper-files/contentDb';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nexport class ContentService {\n  constructor(messageService) {\n    this.messageService = messageService;\n  } // synchronous\n\n\n  getContents() {\n    return CONTENT_LIST;\n  } // asynchronous\n\n\n  getContentsObs() {\n    this.messageService.add('Content retrieved');\n    return of(CONTENT_LIST);\n  }\n\n}\n\nContentService.ɵfac = function ContentService_Factory(t) {\n  return new (t || ContentService)(i0.ɵɵinject(i1.MessageService));\n};\n\nContentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContentService,\n  factory: ContentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/sid/Documents/GitHub/Angular/src/app/services/content.service.ts"],"names":[],"mappings":"AACA,SAAqB,EAArB,QAA+B,MAA/B;AAGA,SAAS,YAAT,QAA6B,2BAA7B;;;AAMA,OAAM,MAAO,cAAP,CAAqB;AACzB,EAAA,WAAA,CAAoB,cAApB,EAAkD;AAA9B,SAAA,cAAA,GAAA,cAAA;AAAkC,GAD7B,CAG3B;;;AACE,EAAA,WAAW,GAAA;AACX,WAAO,YAAP;AACD,GAN0B,CAQ3B;;;AACE,EAAA,cAAc,GAAA;AACb,SAAK,cAAL,CAAoB,GAApB,CAAwB,mBAAxB;AACA,WAAO,EAAE,CAAC,YAAD,CAAT;AACA;;AAZwB;;;mBAAd,c,EAAc,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,cAAA,C;AAAA,C;;;SAAd,c;AAAc,EAAA,OAAA,EAAd,cAAc,CAAA,I;AAAA,EAAA,UAAA,EAFb","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { Content } from '../helper-files/content-interface';\nimport { CONTENT_LIST } from '../helper-files/contentDb';\nimport { MessageService } from './message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContentService {\n  constructor(private messageService: MessageService) {}\n\n// synchronous\n  getContents(): Content[] {\n  return CONTENT_LIST;\n}\n\n// asynchronous\n  getContentsObs(): Observable<Content[]> {\n   this.messageService.add('Content retrieved');\n   return of(CONTENT_LIST);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}